# ####################################################
# This Dockfile was originally generated by: 
# Neurodocker version 0.7.0 
# (https://github.com/ReproNim/neurodocker)
# on 2021/01/21 15:32:09 UTC.
# ####################################################
# Since then, it had been manually modified by 
# Haoming Huang (fsplscallmejo@live.com) for 
# The Neuroimaging Lab, Department of Radiology,
# The First Affiliated Hospital of
# Guangzhou University of Chinese Medicine.
# ####################################################
# It had been tuned so that the final docker image
# can be built inside the special network environment
# of CN. The # CN_SP tags are used for controlling 
# the networking during the build procedures
# through ss-libev proxy by proxychains-ng.
# ####################################################

FROM radiolab_base:latest

USER root

ARG DEBIAN_FRONTEND="noninteractive"

ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" 
    
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           sudo \
           wget \
           curl \
           aria2 \
           locales \
           unzip \
    	   htop \
    	   bmon \
           apt-transport-https \
           ca-certificates \
    	   software-properties-common \
    	   python-software-properties \
           tmux \
           vim \
           firefox \
           bc \
           dc \
           file \
           libfontconfig1 \
           libfreetype6 \
           libgl1-mesa-dev \
           libgl1-mesa-dri \
           libglu1-mesa-dev \
           libgomp1 \
           libice6 \
           libxcursor1 \
           libxft2 \
           libxinerama1 \
           libxrandr2 \
           libxrender1 \
           libxt6 \
           libgomp1 \
           libxmu6 \
           libxt6 \
           perl \
           tcsh \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && gsl2_path="$(find / -name 'libgsl.so.19' || printf '')" \
    && if [ -n "$gsl2_path" ]; then \
         ln -sfv "$gsl2_path" "$(dirname $gsl2_path)/libgsl.so.0"; \
    fi \
    && ldconfig \ 
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt 
RUN mkdir -p /radiolabdocker \
    && chmod -R 777 /radiolabdocker && chmod a+s /radiolabdocker \
    && export RD_ENTRYPOINT="/radiolabdocker/startup.sh" \
    && if [ ! -f "$RD_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$RD_ENTRYPOINT" \
    &&   echo 'set -e' >> "$RD_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$RD_ENTRYPOINT"; \
    fi 
ENV RD_ENTRYPOINT="/radiolabdocker/startup.sh"
ENTRYPOINT ["/radiolabdocker/startup.sh"]

RUN echo "deb https://cloud.r-project.org/bin/linux/ubuntu xenial-cran35/" >> /etc/apt/sources.list \
    && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 \
    && add-apt-repository -y ppa:ubuntugis/ppa \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           ed \
           gdal-bin \
           gsl-bin \
           libgdal-dev \
           libgsl-dev \
           libglib2.0-0 \
           libglw1-mesa \
           libjpeg62 \
           libnlopt-dev \
           libxm4 \
           netpbm \
           mpi-default-dev \
           python3 \
           r-base \
           r-base-dev \
           xfonts-base \
           xvfb \
    && curl -sSL --retry 5 -o /tmp/toinstall.deb http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb \
    && dpkg -i /tmp/toinstall.deb \
    && rm /tmp/toinstall.deb \
    && apt-get install -f \
    && apt-get clean \
    && echo "options(Ncpus = $(echo "$(nproc)-2" | bc)L)" > /root/.Rprofile \
    && rm -rf /var/lib/apt/lists/* 
    
RUN add-apt-repository ppa:max-c-lv/shadowsocks-libev -y \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
	    shadowsocks-libev \
	    build-essential \
	    autoconf \
	    libtool \
	    libssl-dev \
	    libpcre3-dev \
	    libc-ares-dev \
	    libev-dev \
	    asciidoc \
	    xmlto \
	    automake \
	    git \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
# CN_SP+
    && git config --global url."https://github.com.cnpmjs.org".insteadOf https://github.com \
# CN_SP-
    && git clone https://github.com/shadowsocks/simple-obfs.git \
    && cd simple-obfs \
    && git submodule update --init --recursive \
    && ./autogen.sh \
    && ./configure \
    && make \
    && make install \
    && cd .. \
    && rm -rf simple-obfs \
    && git clone https://github.com/rofl0r/proxychains-ng.git \
    && cd proxychains-ng \
    && ./configure --prefix=/usr --sysconfdir=/etc \
    && make \
    && make install \
    && make install-config \
    && cd .. \
    && echo ' \
    \n   strict_chain \
    \n   quiet_mode \
    \n   remote_dns_subnet 224 \
    \n   tcp_read_time_out 15000 \
    \n   tcp_connect_time_out 8000 \
    \n   [ProxyList] \
    \n   socks5 	127.0.0.1 1080 ' > /etc/proxychains.conf \
    && rm -rf proxychains-ng 
# CN_SP+
COPY ["content/shadowsocks.json", "/etc/shadowsocks.json"]
# CN_SP-

ENV CMAKE_VERSION="3.20.0" \
    CMAKE_UPDATE="2021-04-03"
RUN mkdir /tmp/cmake \
# CN_SP+
    && `ss-local -c /etc/shadowsocks.json > /dev/null 2>&1 &` \
# CN_SP-
    && \
# CN_SP+
    proxychains4 \
# CN_SP-
    curl -fsSL --retry 5 https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}.tar.gz \
        | tar -xz -C /tmp/cmake --strip-components 1 \
    && cd /tmp/cmake \
    && ./bootstrap --prefix=/opt/cmake \
    && make -j $(echo "$(nproc)-2" | bc) \
    && make install \
    && ln -s /opt/cmake/bin/cmake /usr/bin/cmake && cd .. \
    && rm -rf cmake

ENV FSL_VERSION="6.0.4" \
    FSL_UPDATE="2021-03-15" \
    FSLDIR="/opt/fsl" \
    PATH="/opt/fsl/bin:$PATH" \
    FSLOUTPUTTYPE="NIFTI_GZ" \
    FSLMULTIFILEQUIT="TRUE" \
    FSLTCLSH="/opt/fsl/bin/fsltclsh" \
    FSLWISH="/opt/fsl/bin/fslwish" \
    FSLLOCKDIR="" \
    FSLMACHINELIST="" \
    FSLREMOTECALL="" \
    FSLGECUDAQ="cuda.q"
RUN echo "Installing FSL ..." \
    && mkdir /opt/fsl \
# CN_SP+
    && `ss-local -c /etc/shadowsocks.json > /dev/null 2>&1 &` \
# CN_SP-
    && \
# CN_SP+
    proxychains4 \
# CN_SP-
    curl -fsSL --retry 5 https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-${FSL_VERSION}-centos7_64.tar.gz \
     | tar -xz -C /opt/fsl --strip-components 1 \
    && echo 'Some packages in this Docker container are non-free' \
    && echo 'If you are considering commercial use of this container, please consult the relevant license:' \
    && echo 'https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Licence' \
    && echo "Installing FSL conda environment ..." \
    && \
# CN_SP+
    proxychains4 \
# CN_SP-
    bash /opt/fsl/etc/fslconf/fslpython_install.sh -f /opt/fsl \
    && sed -i '$isource $FSLDIR/etc/fslconf/fsl.sh' $RD_ENTRYPOINT \
    && echo "Get neurolabusc's fsl_sub for a better parallel compute experient ..." \
    && git clone https://github.com/neurolabusc/fsl_sub /opt/fsl_sub \
    && rm /opt/fsl/bin/fsl_sub \
    && chmod a+x /opt/fsl_sub/fsl_sub \
    && ln -s /opt/fsl_sub/fsl_sub /opt/fsl/bin/fsl_sub

ENV AFNI_VERSION="ubuntu_16_64" \
    AFNI_UPDATE="2021-03-15" \
    PATH="/opt/afni:$PATH" \
    AFNI_PLUGINPATH="/opt/afni"\
    QT_X11_NO_MITSHM=1
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           python-qt4 \
           libgtk2.0-0 \
           libcurl4-openssl-dev \
           libxml2-dev \
           libv8-dev \
           libudunits2-dev \
           openmpi-bin \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Installing AFNI ..." \
    && mkdir -p /opt/afni \
# CN_SP+
    && `ss-local -c /etc/shadowsocks.json > /dev/null 2>&1 &` \
# CN_SP-
    && \
# CN_SP+
    proxychains4 \
# CN_SP-
    curl -fsSL --retry 5 https://afni.nimh.nih.gov/pub/dist/tgz/linux_${AFNI_VERSION}.tgz \
        | tar -xz -C /opt/afni --strip-components 1 \
    && PATH=$PATH:/opt/afni \
# CN_SP+
    proxychains4 \
# CN_SP-
    rPkgsInstall -pkgs ALL \
    && rm /root/.Rprofile

ENV ANTS_VERSION="latest-git" \
    ANTS_UPDATE="2021-03-23" \
    ANTSPATH="/opt/ants/bin" \
    PATH="/opt/ants/bin:/opt/ants/Scripts:$PATH"
RUN echo "Installing ANTs ..." \
    && mkdir -p /tmp/ants-build/build \
    && git clone https://github.com/ANTsX/ANTs /tmp/ants-build/ANTs \
    && cd /tmp/ants-build/build \
# CN_SP+
    && `ss-local -c /etc/shadowsocks.json > /dev/null 2>&1 &` \
# CN_SP-
    && \
# CN_SP+
    proxychains4 \
# CN_SP-
    cmake -DCMAKE_INSTALL_PREFIX=/opt/ants ../ANTs 2>&1 \
    && make -j $(echo "$(nproc)-2" | bc) 2>&1 \
    && cd ANTS-build \
    && make install 2>&1 \
    && cp -r /tmp/ants-build/ANTs/Scripts /opt/ants/ && cd /opt \
    && rm -r /tmp/ants-build

ENV FREESURFER_VERSION="7.1.1" \
    FREESURFER_UPDATE="2021-03-15" \
    FREESURFER_HOME="/opt/freesurfer" \
    PATH="/opt/freesurfer/bin:$PATH" \
    LD_LIBRARY_PATH="/opt/freesurfer/lib/qt/lib:$LD_LIBRARY_PATH"
RUN echo "Installing FreeSurfer ..." \
    && mkdir -p /opt/freesurfer \
# CN_SP+
    && `ss-local -c /etc/shadowsocks.json > /dev/null 2>&1 &` \
# CN_SP-
    && \
# CN_SP+
    proxychains4 \
# CN_SP-
    curl -fsSL --retry 5 https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/7.1.1/freesurfer-linux-centos7_x86_64-7.1.1.tar.gz \
     | tar -xz -C /opt/freesurfer --strip-components 1 \
    && sed -i '$isource "/opt/freesurfer/SetUpFreeSurfer.sh"' "$RD_ENTRYPOINT"

ENV MRTRIX3_VERSION="latest-git" \
    MRTRIX3_UPDATE="2021-04-06" \
    MRTRIX3PATH="/opt/mrtrix3" \
    PATH="/opt/mrtrix3/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install  -y -q --no-install-recommends \
        parallel \
        pexec \
        python \
        qt5-default \
        libeigen3-dev \
        zlib1g-dev \
        libqt5opengl5-dev \
        libqt5svg5-dev \
        libfftw3-dev \
        libtiff5-dev \
        libpng-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Installing MRtrix3 ..." \
    && git clone https://github.com/MRtrix3/mrtrix3.git /opt/mrtrix3 \
    && cd /opt/mrtrix3 \
    && ./configure \
    && ./build

RUN chmod 755 /radiolabdocker/startup.sh \
    && echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> $RD_ENTRYPOINT 

####################
#### Post Build ####
####################
ENV NEOVIM_VERSION="xenial-ppa-unstable" \
    NODEJS_VERSION="12" \
    NODEJS_SUBVERSION="22.0" \
    NODEJS_UPDATE="2021-04-05"
RUN add-apt-repository ppa:neovim-ppa/unstable \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
        neovim \
        man \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && mkdir /opt/nodejs \
    && curl -fsSL --retry 5 https://npm.taobao.org/mirrors/node/latest-v${NODEJS_VERSION}.x/node-v${NODEJS_VERSION}.${NODEJS_SUBVERSION}-linux-x64.tar.gz \
        | tar -xz -C /opt/nodejs --strip-components 1 \
    && ln -s /opt/nodejs/bin/node /usr/bin/node \
    && ln -s /opt/nodejs/bin/npm /usr/bin/npm

RUN rm /etc/proxychains.conf \
    && rm /etc/shadowsocks.json

####################
#### Sys Update ####
####################
ARG SYS_BUILD_DATE
ENV SYS_BUILD_DATE=${SYS_BUILD_DATE}
RUN apt-get update -qq \
    && apt-get upgrade -qq \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*
