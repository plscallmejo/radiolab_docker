# Originally generated by: Neurodocker version 0.7.0+0.gdc97516.dirty
# Timestamp: 2021/01/21 15:32:09 UTC

ARG RUNTIME

FROM nvidia/cudagl:9.1-runtime-ubuntu16.04 AS ubuntu-xenial-nvidia
# nvidia-container-runtime
ENV NV_RUNTIME=TRUE
ENV BASE="nvidia/cudagl:9.1-runtime-ubuntu16.04"
ENV NVIDIA_VISIBLE_DEVICES ${NVIDIA_VISIBLE_DEVICES:-all}
ENV NVIDIA_DRIVER_CAPABILITIES ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}graphics
RUN sed -i "s/archive.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g" /etc/apt/sources.list \
    && echo "deb https://mirrors.aliyun.com/nvidia-cuda/ubuntu1604/x86_64/ ./" > /etc/apt/sources.list.d/cuda.list 

FROM ubuntu:16.04 AS ubuntu-xenial-intel
# mesa runtime
ENV NV_RUNTIME=FALSE
ENV BASE="ubuntu:16.04"
RUN sed -i "s/archive.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g" /etc/apt/sources.list
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           qt5-default \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* 

FROM ubuntu-xenial-${RUNTIME}

USER root

ARG DEBIAN_FRONTEND="noninteractive"

ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" 
    
ENV FSL_VERSION="6.0.4" \
    AFNI_VERSION="ubuntu_16_64" \
    FREESURFER_VERSION="7.1.1" \
    ANTS_VERSION="2.3.4"

RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           sudo \
           wget \
           curl \
           aria2 \
           locales \
           unzip \
    	   htop \
    	   bmon \
           apt-transport-https \
           ca-certificates \
    	   software-properties-common \
    	   python-software-properties \
           tmux \
           vim \
           firefox \
           bc \
           dc \
           file \
           libfontconfig1 \
           libfreetype6 \
           libgl1-mesa-dev \
           libgl1-mesa-dri \
           libglu1-mesa-dev \
           libgomp1 \
           libice6 \
           libxcursor1 \
           libxft2 \
           libxinerama1 \
           libxrandr2 \
           libxrender1 \
           libxt6 \
           libgomp1 \
           libxmu6 \
           libxt6 \
           perl \
           tcsh \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && gsl2_path="$(find / -name 'libgsl.so.19' || printf '')" \
    && if [ -n "$gsl2_path" ]; then \
         ln -sfv "$gsl2_path" "$(dirname $gsl2_path)/libgsl.so.0"; \
    fi \
    && ldconfig \ 
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt 
RUN mkdir -p /radiolabdocker \
    && chmod -R 777 /radiolabdocker && chmod a+s /radiolabdocker \
    && export RD_ENTRYPOINT="/radiolabdocker/startup.sh" \
    && if [ ! -f "$RD_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$RD_ENTRYPOINT" \
    &&   echo 'set -e' >> "$RD_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$RD_ENTRYPOINT"; \
    fi 
ENV RD_ENTRYPOINT="/radiolabdocker/startup.sh"
ENTRYPOINT ["/radiolabdocker/startup.sh"]

RUN echo "deb https://cloud.r-project.org/bin/linux/ubuntu xenial-cran35/" >> /etc/apt/sources.list \
    && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           ed \
           gsl-bin \
           libglib2.0-0 \
           libglu1-mesa-dev \
           libglw1-mesa \
           libgomp1 \
           libjpeg62 \
           libnlopt-dev \
           libxm4 \
           netpbm \
           python3 \
           r-base \
           r-base-dev \
           tcsh \
           xfonts-base \
           xvfb \
    && curl -sSL --retry 5 -o /tmp/toinstall.deb http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb \
    && dpkg -i /tmp/toinstall.deb \
    && rm /tmp/toinstall.deb \
    && apt-get install -f \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* 
    
RUN add-apt-repository ppa:max-c-lv/shadowsocks-libev -y \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
	    shadowsocks-libev \
	    build-essential \
	    autoconf \
	    libtool \
	    libssl-dev \
	    libpcre3-dev \
	    libc-ares-dev \
	    libev-dev \
	    asciidoc \
	    xmlto \
	    automake \
	    git \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* 
RUN git clone https://github.com/shadowsocks/simple-obfs.git \
    && cd simple-obfs \
    && git submodule update --init --recursive \
    && ./autogen.sh \
    && ./configure \
    && make \
    && make install \
    && cd .. \
    && rm -rf simple-obfs 
RUN git clone https://github.com/rofl0r/proxychains-ng.git \
    && cd proxychains-ng \
    && ./configure --prefix=/usr --sysconfdir=/etc \
    && make \
    && make install \
    && make install-config \
    && cd .. \
    && rm -rf proxychains-ng 
COPY ["content/proxychains.conf", "/etc/proxychains.conf"]
COPY ["content/shadowsocks.json", "/etc/shadowsocks.json"]

COPY ["content/fsl-6.0.4-centos7_64.tar.gz", "/tmp/"]
ENV FSLDIR="/opt/fsl" \
    PATH="/opt/fsl/bin:$PATH" \
    FSLOUTPUTTYPE="NIFTI_GZ" \
    FSLMULTIFILEQUIT="TRUE" \
    FSLTCLSH="/opt/fsl/bin/fsltclsh" \
    FSLWISH="/opt/fsl/bin/fslwish" \
    FSLLOCKDIR="" \
    FSLMACHINELIST="" \
    FSLREMOTECALL="" \
    FSLGECUDAQ="cuda.q" 
RUN echo "Installing FSL ..." \
    && mkdir /opt/fsl \
    && `ss-local -c /etc/shadowsocks.json > /dev/null 2>&1 &` \
#    && proxychains4 curl -fsSL --retry 5 https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.4-centos7_64.tar.gz \
#     | tar -xz -C /opt/fsl --strip-components 1 \
    && tar -xzvf /tmp/fsl-6.0.4-centos7_64.tar.gz -C /opt/fsl --strip-components 1 \
    && rm /tmp/fsl-6.0.4-centos7_64.tar.gz \
    && echo 'Some packages in this Docker container are non-free' \
    && echo 'If you are considering commercial use of this container, please consult the relevant license:' \
    && echo 'https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Licence' \
    && echo "Installing FSL conda environment ..." \
    && proxychains4 bash /opt/fsl/etc/fslconf/fslpython_install.sh -f /opt/fsl \
    && sed -i '$isource $FSLDIR/etc/fslconf/fsl.sh' $RD_ENTRYPOINT 
COPY ["content/fsl_sub", "/opt/fsl/bin/fsl_sub"]
RUN chmod a+x /opt/fsl/bin/fsl_sub

COPY ["content/linux_ubuntu_16_64.tgz", "/tmp/linux_ubuntu_16_64.tgz"]
ENV PATH="/opt/afni:$PATH" \
    AFNI_PLUGINPATH="/opt/afni"\
    QT_X11_NO_MITSHM=1
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           python-qt4 \
           libgtk2.0-0 \
           libcurl4-openssl-dev \
           libxml2-dev \
           libudunits2-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* 
RUN echo "Installing AFNI ..." \
    && mkdir -p /opt/afni \
#     && curl -fsSL --retry 5 https://afni.nimh.nih.gov/pub/dist/tgz/linux_ubuntu_16_64.tgz \
#     | tar -xz -C /opt/afni --strip-components 1 \
    && tar -zxvf /tmp/linux_ubuntu_16_64.tgz -C /opt/afni --strip-components 1 \
    && rm /tmp/linux_ubuntu_16_64.tgz \
    && PATH=$PATH:/opt/afni rPkgsInstall -pkgs ALL 

COPY ["content/freesurfer-linux-centos7_x86_64-7.1.1.tar.gz", "/tmp/"]
COPY ["content/license.txt", "/tmp/"]
ENV FREESURFER_HOME="/opt/freesurfer" \
    PATH="/opt/freesurfer/bin:$PATH"
RUN echo "Installing FreeSurfer ..." \
    && mkdir -p /opt/freesurfer \
#    && curl -fsSL --retry 5 https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/7.1.1/freesurfer-linux-centos7_x86_64-7.1.1.tar.gz \
#     | tar -xz -C /opt/freesurfer --strip-components 1 \
    && tar -zxvf /tmp/freesurfer-linux-centos7_x86_64-7.1.1.tar.gz -C /opt/freesurfer --strip-components 1 \
    && sed -i '$isource "/opt/freesurfer/SetUpFreeSurfer.sh"' "$RD_ENTRYPOINT" \
    && mv /tmp/license.txt /opt/freesurfer/ \
    && rm /tmp/freesurfer-linux-centos7_x86_64-7.1.1.tar.gz

COPY ["content/ants-Linux-centos6_x86_64-v2.3.4.tar.gz", "/tmp/ants-Linux-centos6_x86_64-v2.3.4.tar.gz"]
ENV ANTSPATH="/opt/ants" \
    PATH="/opt/ants:$PATH"
RUN echo "Installing ANTs ..." \
    && mkdir -p /opt/ants \
#     && curl -fsSL --retry 5 https://dl.dropbox.com/s/gwf51ykkk5bifyj/ants-Linux-centos6_x86_64-v2.3.4.tar.gz \
#     | tar -xz -C /opt/ants --strip-components 1 \
    && tar -zxvf /tmp/ants-Linux-centos6_x86_64-v2.3.4.tar.gz -C /opt/ants --strip-components 1 \
    && rm /tmp/ants-Linux-centos6_x86_64-v2.3.4.tar.gz

RUN rm /etc/proxychains.conf \
    && rm /etc/shadowsocks.json

RUN chmod 755 /radiolabdocker/startup.sh \
    && echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> $RD_ENTRYPOINT \
    && echo '{ \
    \n  "pkg_manager": "apt", \
    \n  "instructions": [ \
    \n    [ \
    \n      "base", \
    \n      "ubuntu:16.04" \
    \n    ], \
    \n    [ \
    \n      "fsl", \
    \n      { \
    \n        "version": "6.0.4" \
    \n      } \
    \n    ], \
    \n    [ \
    \n      "freesurfer", \
    \n      { \
    \n        "version": "7.1.1" \
    \n      } \
    \n    ], \
    \n    [ \
    \n      "ants", \
    \n      { \
    \n        "version": "2.3.4" \
    \n      } \
    \n    ], \
    \n    [ \
    \n      "afni", \
    \n      { \
    \n        "version": "latest", \
    \n        "install_r": "true", \
    \n        "install_r_pkgs": "true" \
    \n      } \
    \n    ] \
    \n  ] \
    \n}' > /radiolabdocker/radiolabdocker_specs.json
